name: CI
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Fetch all history for all branches and tags
          fetch-tags: false
          persist-credentials: true
          token: ${{ secrets.FINE_GRAINED_PAT }}  # Use fine-grained PAT for checkout
      
      - name: Download proxy and setup
        shell: powershell
        run: |
          # Download simple-proxy and playit binaries
          Invoke-WebRequest -Uri "https://github.com/Briiqn/simple-proxy/raw/refs/heads/main/bin/simple-proxy.exe" -OutFile "simple-proxy.exe"
          Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "playit-windows-amd64.exe"
          
          # Set executable permissions
          icacls simple-proxy.exe /grant:r "$($env:USERNAME):(RX)"
          icacls playit-windows-amd64.exe /grant:r "$($env:USERNAME):(RX)"

      - name: Debug - List directory contents
        shell: powershell
        run: Get-ChildItem -Path . -Force
      
      - name: Run proxy and playit with auto-restart and workflow recreation
        if: "!contains(github.event.head_commit.message, 'Auto commit every 30 seconds [no ci]')"
        continue-on-error: true
        shell: powershell
        env:
          FINE_GRAINED_PAT: ${{ secrets.FINE_GRAINED_PAT }}
          REPO: ${{ github.repository }}
          PLAYIT_SECRET: ${{ secrets.PLAYIT_SECRET }}

        run: |
          # Ensure logs directory exists
          New-Item -ItemType Directory -Force -Path "$env:GITHUB_WORKSPACE\logs"

          # Create playit configuration
          $Utf8NoBomEncoding = New-Object System.Text.UTF8Encoding $False
          [System.IO.File]::WriteAllLines("$env:GITHUB_WORKSPACE\playit.toml", $env:PLAYIT_SECRET, $Utf8NoBomEncoding)

          # Start functions
          function Start-Proxy {
            Write-Host "Starting Proxy..."
            $global:ProxyProcess = Start-Process -FilePath "$env:GITHUB_WORKSPACE\simple-proxy.exe" -PassThru -NoNewWindow
            Write-Host "Proxy started with PID $($global:ProxyProcess.Id)"
          }

          function Start-Playit {
            Write-Host "Starting Playit..."
            $logFile = "$env:GITHUB_WORKSPACE\logs\playit-$(Get-Date -Format 'yyyyMMdd-HHmmss').log"
            $global:PlayitProcess = Start-Process -FilePath "$env:GITHUB_WORKSPACE\playit-windows-amd64.exe" -RedirectStandardOutput $logFile -PassThru -NoNewWindow
            Write-Host "Playit started with PID $($global:PlayitProcess.Id). Logging to $logFile"
          }

          function Delete-AutoCommitWorkflows {
            $headers = @{
              "Authorization" = "token $env:FINE_GRAINED_PAT"
              "Accept" = "application/vnd.github.v3+json"
            }
            $workflowRuns = Invoke-RestMethod -Uri "https://api.github.com/repos/$env:REPO/actions/runs" -Headers $headers
            $autoCommitRuns = $workflowRuns.workflow_runs | Where-Object { $_.head_commit.message -like "*Auto commit every 30 seconds*" }
            
            foreach ($run in $autoCommitRuns) {
              Write-Host "Deleting workflow run $($run.id)"
              Invoke-RestMethod -Method Delete -Uri "https://api.github.com/repos/$env:REPO/actions/runs/$($run.id)" -Headers $headers
            }
          }

          function Create-NewWorkflowRun {
            $headers = @{
              "Authorization" = "token $env:FINE_GRAINED_PAT"
              "Accept" = "application/vnd.github.v3+json"
            }
            Invoke-RestMethod -Method Post -Uri "https://api.github.com/repos/$env:REPO/actions/workflows/blank.yml/dispatches" -Headers $headers -Body '{"ref":"main"}'
            Write-Host "New workflow run created"
          }

          function Cancel-OldWorkflowRuns {
            $headers = @{
              "Authorization" = "token $env:FINE_GRAINED_PAT"
              "Accept" = "application/vnd.github.v3+json"
            }
            $workflowRuns = Invoke-RestMethod -Uri "https://api.github.com/repos/$env:REPO/actions/runs?branch=main&status=in_progress" -Headers $headers
            $currentRunId = $env:GITHUB_RUN_ID
            
            $runsToCancel = $workflowRuns.workflow_runs | Where-Object { $_.id -ne $currentRunId }
            foreach ($run in $runsToCancel) {
              Write-Host "Cancelling workflow run $($run.id)"
              # Uncomment if GitHub Actions API supports cancellation via PowerShell
              # Invoke-RestMethod -Method Post -Uri "https://api.github.com/repos/$env:REPO/actions/runs/$($run.id)/cancel" -Headers $headers
            }
          }

          # Start proxy
            
          Set-DnsClientDohServerAddress -ServerAddress "1.1.1.1" -DohTemplate "https://cloudflare-dns.com/dns-query" -AutoUpgrade $true
          Set-DnsClientDohServerAddress -ServerAddress "1.0.0.1" -DohTemplate "https://cloudflare-dns.com/dns-query" -AutoUpgrade $true
          .\warp.ps1
          Start-Proxy

          # Start playit with logging
          Start-Playit

          $StartTime = Get-Date

          # Background job to cancel old workflow runs
          Start-Job -ScriptBlock { 
            Start-Sleep -Seconds 30
            Cancel-OldWorkflowRuns 
          }

          while ($true) {
            
            
            $CurrentTime = Get-Date
            $ElapsedTime = ($CurrentTime - $StartTime).TotalSeconds
            
            # Check if proxy is still running
            if ($global:ProxyProcess.HasExited) {
              Write-Host "Proxy process has stopped. Restarting Proxy..."
              Start-Proxy
            }

            # Check if playit is still running
            if ($global:PlayitProcess.HasExited) {
              Write-Host "Playit process has stopped. Restarting Playit..."
              Start-Playit
            }

            # Check for 5-hour runtime limit
            if ($ElapsedTime -ge 18000) {
              Write-Host "Workflow has been running for 5 hours."
              Write-Host "Creating new workflow run and exiting current one."
              Create-NewWorkflowRun
              exit
             
            }
            
            Start-Sleep -Seconds 30
          }


      - name: Rerun workflow if previous step failed
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.FINE_GRAINED_PAT }}
        shell: powershell
        run: |
          $headers = @{
            "Authorization" = "token $env:GITHUB_TOKEN"
            "Accept" = "application/vnd.github.v3+json"
          }
          Invoke-RestMethod -Method Post -Uri "https://api.github.com/repos/${{ github.repository }}/actions/workflows/blank.yml/dispatches" -Headers $headers -Body '{"ref":"main"}'
          Write-Host "Workflow rerun triggered due to previous step failure"
